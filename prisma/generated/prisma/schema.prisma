generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // "student", "teacher", "parent", "admin"
  description String
  isActive    Boolean  @default(true)
  permissions String[]
  users       User[]

  @@map("roles")
}

model User {
  id        String  @id @default(cuid())
  clerkId   String? @unique // ID dari Clerk
  roleId    String // Foreign key ke Role (WAJIB)
  name      String // Nama (WAJIB untuk semua)
  email     String? @unique
  avatarUrl String?

  // === FIELDS UNTUK STUDENT ===
  nisn           String?   @unique // Wajib untuk student
  birthPlace     String? // Wajib untuk student
  birthDate      DateTime? // Wajib untuk student
  nik            String?   @unique // Wajib untuk student
  address        String? // Wajib untuk student
  classId        String? // Wajib untuk student
  academicYearId String? // Wajib untuk student
  enrollmentDate DateTime? // Default now() untuk student
  gender         String? // Wajib untuk student & teacher
  graduationDate DateTime? // Optional untuk student
  majorId        String? // Wajib untuk student
  parentPhone    String? // Optional untuk student
  status         String?   @default("active") // active/inactive/graduated

  // === FIELDS UNTUK TEACHER ===
  employeeId String?   @unique // Wajib untuk teacher
  position   String? // Optional untuk teacher
  startDate  DateTime? // Default now() untuk teacher
  endDate    DateTime? // Optional untuk teacher

  // === FIELDS UNTUK PARENT ===
  studentIds String[] // Array ID student (anak-anak) - untuk parent
  relation   String? // Father/Mother/Guardian - wajib untuk parent

  // === TIMESTAMPS ===
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === RELATIONS ===
  role Role @relation(fields: [roleId], references: [id])

  // Relations sebagai Student
  academicYear AcademicYear? @relation("StudentAcademicYear", fields: [academicYearId], references: [id])
  class        Class?        @relation("StudentClass", fields: [classId], references: [id])
  major        Major?        @relation("StudentMajor", fields: [majorId], references: [id])
  attendances  Attendance[]  @relation("StudentAttendance")
  payments     Payment[]     @relation("StudentPayment")
  violations   Violation[]   @relation("StudentViolation")

  // Relations sebagai Teacher
  schedules Schedule[] @relation("TeacherSchedule")

  // Relations sebagai Parent (many-to-many dengan students)
  parentOf User[] @relation("ParentStudent")
  parents  User[] @relation("ParentStudent")

  @@map("users")
}

// Models lain tetap sama, hanya relasi yang berubah
model AcademicYear {
  id             String          @id @default(cuid())
  year           String          @unique
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  calendarEvents CalendarEvent[]
  classes        Class[]
  schedules      Schedule[]
  students       User[]          @relation("StudentAcademicYear") // Relasi ke User
  violationTypes ViolationType[]

  @@map("academic_years")
}

model Major {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  isActive    Boolean   @default(true)
  classes     Class[]
  students    User[]    @relation("StudentMajor") // Relasi ke User
  subjects    Subject[]

  @@map("majors")
}

model Class {
  id             String       @id @default(cuid())
  name           String
  grade          Int
  majorId        String
  academicYearId String
  capacity       Int          @default(36)
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  major          Major        @relation(fields: [majorId], references: [id])
  schedules      Schedule[]
  students       User[]       @relation("StudentClass") // Relasi ke User
  violations     Violation[]

  @@unique([name, academicYearId])
  @@map("classes")
}

model Subject {
  id          String     @id @default(cuid())
  code        String     @unique
  name        String
  description String?
  majorId     String?
  credits     Int        @default(2)
  isActive    Boolean    @default(true)
  schedules   Schedule[]
  major       Major?     @relation(fields: [majorId], references: [id])

  @@map("subjects")
}

model Schedule {
  id             String       @id @default(cuid())
  classId        String
  subjectId      String
  teacherId      String // Relasi ke User dengan role teacher
  academicYearId String
  dayOfWeek      Int
  startTime      String
  endTime        String
  room           String?
  attendances    Attendance[]
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  subject        Subject      @relation(fields: [subjectId], references: [id])
  teacher        User         @relation("TeacherSchedule", fields: [teacherId], references: [id]) // Relasi ke User

  @@unique([classId, subjectId, teacherId, dayOfWeek, startTime])
  @@map("schedules")
}

model Attendance {
  id         String   @id @default(cuid())
  studentId  String // Relasi ke User dengan role student
  scheduleId String
  status     String
  notes      String?
  createdAt  DateTime @default(now())
  date       DateTime
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  student    User     @relation("StudentAttendance", fields: [studentId], references: [id]) // Relasi ke User

  @@unique([studentId, scheduleId, date])
  @@map("attendances")
}

model ViolationType {
  id             String       @id @default(cuid())
  name           String
  description    String
  points         Int
  category       String
  academicYearId String
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  violations     Violation[]

  @@map("violation_types")
}

model Violation {
  id              String        @id @default(cuid())
  studentId       String // Relasi ke User dengan role student
  violationTypeId String
  classId         String
  description     String?
  status          String        @default("active")
  reportedBy      String
  createdAt       DateTime      @default(now())
  date            DateTime
  resolutionDate  DateTime?
  resolutionNotes String?
  class           Class         @relation(fields: [classId], references: [id])
  student         User          @relation("StudentViolation", fields: [studentId], references: [id]) // Relasi ke User
  violationType   ViolationType @relation(fields: [violationTypeId], references: [id])

  @@map("violations")
}

model PaymentType {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  amount      Decimal
  isMonthly   Boolean   @default(false)
  isActive    Boolean   @default(true)
  payments    Payment[]

  @@map("payment_types")
}

model Payment {
  id            String      @id @default(cuid())
  studentId     String // Relasi ke User dengan role student
  paymentTypeId String
  amount        Decimal
  dueDate       DateTime?
  status        String      @default("pending")
  notes         String?
  createdAt     DateTime    @default(now())
  paymentDate   DateTime
  receiptNumber String?
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  student       User        @relation("StudentPayment", fields: [studentId], references: [id]) // Relasi ke User

  @@map("payments")
}

model CalendarEvent {
  id             String       @id @default(cuid())
  title          String
  description    String?
  eventDate      DateTime
  eventType      String
  isPublished    Boolean      @default(false)
  academicYearId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])

  @@map("calendar_events")
}
